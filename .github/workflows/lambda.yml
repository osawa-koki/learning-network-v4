name: Deploy Lambda

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  app_dir: ./api/my-app
  api_dir: ./api

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
          node-version: '18.x'
      - run: npm install
        working-directory: ${{ env.app_dir }}
      - run: npm run test
        working-directory: ${{ env.app_dir }}
    outputs:
      test-status: ${{ job.status }}
  deploy:
    needs: test
    if: ${{ needs.test.outputs.test-status == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - uses: aws-actions/setup-sam@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - run: sam build --use-container
        working-directory: ${{ env.api_dir }}
      - name: Deploy Lambda
        env:
          project_name: learning-network-v4
        run: |
          sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --resolve-image-repos \
            --stack-name ${{ env.project_name }} \
            --s3-bucket ${{ env.project_name }} \
            --capabilities CAPABILITY_IAM \
          || aws s3 mb s3://${{ env.project_name }} && sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --resolve-image-repos \
            --stack-name ${{ env.project_name }} \
            --s3-bucket ${{ env.project_name }} \
            --capabilities CAPABILITY_IAM
        working-directory: ${{ env.api_dir }}
      - name: Get API Gateway URL
        run: |
          API_GATEWAY_URL=$(aws cloudformation describe-stacks --stack-name ${{ env.project_name }} --query "Stacks[0].Outputs[?OutputKey=='YourInfoApi'].OutputValue" --output text --no-cli-pager)
          echo "API_GATEWAY_URL=$API_GATEWAY_URL" >> $GITHUB_ENV
        working-directory: ${{ env.api_dir }}
      - name: Cat API Gateway URL
        run: echo $API_GATEWAY_URL
  confirm:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check status code of curl response
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" $API_GATEWAY_URL)
          if [ $response -eq 200 ]; then
            echo "Success"
          else
            echo "Failed"
            exit 1
          fi
